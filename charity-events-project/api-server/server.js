const express = require('express');
const cors = require('cors');
const mysql = require('mysql2');
require('dotenv').config();

const app = express();
const PORT = process.env.API_PORT || 3000;

// Âü∫Á°Ä‰∏≠Èó¥‰ª∂
app.use(cors());
app.use(express.json());

// ÂàõÂª∫Êï∞ÊçÆÂ∫ìËøûÊé•
const db = mysql.createPool({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root', 
    password: process.env.DB_PASSWORD || 'yxx860818.',
    database: process.env.DB_NAME || 'charityevents_db',
    port: process.env.DB_PORT || 3306,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

// ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
db.getConnection((err, connection) => {
    if (err) {
        console.error('‚ùå Database connection failed:', err.message);
    } else {
        console.log('‚úÖ Database connected successfully');
        connection.release();
    }
});

// ========== Ê†∏ÂøÉAPIË∑ØÁî± ==========

// 1. Ê†πË∑ØÂæÑ - ÊµãËØïÊúçÂä°Âô®ÊòØÂê¶Â∑•‰Ωú
app.get('/', (req, res) => {
    res.json({ 
        message: 'Charity Events API Server is running!',
        timestamp: new Date().toISOString(),
        endpoints: [
            'GET /health',
            'GET /api/events', 
            'GET /api/events/:id',
            'GET /api/events/search',
            'GET /api/categories'
        ]
    });
});

// 2. ÂÅ•Â∫∑Ê£ÄÊü•Á´ØÁÇπ
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK',
        server: 'Express.js',
        timestamp: new Date().toISOString()
    });
});

// 3. Ëé∑ÂèñÊâÄÊúâÊ¥ªÂä® - ËøôÊòØÊÇ®ÈúÄË¶ÅÁöÑÁ´ØÁÇπ
app.get('/api/events', async (req, res) => {
    console.log('üì• GET /api/events request received');
    
    try {
        const query = `
            SELECT e.*, c.name as category_name 
            FROM events e 
            LEFT JOIN categories c ON e.category_id = c.id 
            WHERE e.is_active = true
            ORDER BY e.date_time ASC
        `;
        
        const [events] = await db.promise().query(query);
        console.log(`‚úÖ Found ${events.length} events`);
        
        res.json({
            success: true,
            data: events,
            count: events.length,
            message: `Successfully retrieved ${events.length} events`
        });
        
    } catch (error) {
        console.error('‚ùå Error fetching events:', error);
        res.status(500).json({ 
            success: false,
            error: 'Failed to fetch events',
            message: error.message
        });
    }
});

// 4. Ëé∑ÂèñÂçï‰∏™Ê¥ªÂä®ËØ¶ÊÉÖ
app.get('/api/events/:id', async (req, res) => {
    const eventId = req.params.id;
    console.log(`üì• GET /api/events/${eventId} request received`);
    
    try {
        const query = `
            SELECT e.*, c.name as category_name 
            FROM events e 
            LEFT JOIN categories c ON e.category_id = c.id 
            WHERE e.id = ? AND e.is_active = true
        `;
        
        const [events] = await db.promise().query(query, [eventId]);
        
        if (events.length === 0) {
            return res.status(404).json({ 
                success: false,
                error: 'Event not found'
            });
        }
        
        res.json({
            success: true,
            data: events[0]
        });
        
    } catch (error) {
        console.error(`‚ùå Error fetching event ${eventId}:`, error);
        res.status(500).json({ 
            success: false,
            error: 'Failed to fetch event'
        });
    }
});

// 5. ÊêúÁ¥¢Ê¥ªÂä®
app.get('/api/events/search', async (req, res) => {
    console.log('üîç GET /api/events/search request received', req.query);
    
    try {
        const { date, location, category } = req.query;
        
        let query = `
            SELECT e.*, c.name as category_name 
            FROM events e 
            LEFT JOIN categories c ON e.category_id = c.id 
            WHERE e.is_active = true
        `;
        let params = [];

        if (location) {
            query += ' AND (e.location LIKE ? OR e.name LIKE ?)';
            params.push(`%${location}%`);
            params.push(`%${location}%`);
        }
        if (date) {
            query += ' AND DATE(e.date_time) = ?';
            params.push(date);
        }
        if (category) {
            query += ' AND e.category_id = ?';
            params.push(category);
        }

        query += ' ORDER BY e.date_time ASC';

        const [events] = await db.promise().query(query, params);
        
        res.json({
            success: true,
            data: events,
            count: events.length
        });
        
    } catch (error) {
        console.error('‚ùå Search error:', error);
        res.status(500).json({ 
            success: false,
            error: 'Search failed'
        });
    }
});

// 6. Ëé∑ÂèñÊâÄÊúâÂàÜÁ±ª
app.get('/api/categories', async (req, res) => {
    console.log('üì• GET /api/categories request received');
    
    try {
        const query = 'SELECT * FROM categories ORDER BY name ASC';
        const [categories] = await db.promise().query(query);
        
        res.json({
            success: true,
            data: categories,
            count: categories.length
        });
        
    } catch (error) {
        console.error('‚ùå Error fetching categories:', error);
        res.status(500).json({ 
            success: false,
            error: 'Failed to fetch categories'
        });
    }
});

// Â§ÑÁêÜ404 - Êú™ÊâæÂà∞ÁöÑË∑ØÁî±
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        error: 'Endpoint not found',
        requestedUrl: req.originalUrl,
        method: req.method,
        availableEndpoints: [
            'GET /',
            'GET /health', 
            'GET /api/events',
            'GET /api/events/:id',
            'GET /api/events/search',
            'GET /api/categories'
        ]
    });
});

// ÂêØÂä®ÊúçÂä°Âô®
app.listen(PORT, () => {
    console.log('\n' + '='.repeat(60));
    console.log('üöÄ Charity Events API Server Started!');
    console.log('='.repeat(60));
    console.log(`üìç Server URL: http://localhost:${PORT}`);
    console.log(`üìç Health Check: http://localhost:${PORT}/health`);
    console.log(`üìç Events API: http://localhost:${PORT}/api/events`);
    console.log('='.repeat(60));
});

// ‰ºòÈõÖÂÖ≥Èó≠Â§ÑÁêÜ
process.on('SIGINT', () => {
    console.log('\nüõë Shutting down server gracefully...');
    process.exit(0);
});

/**
 * ‰∏ªÊúçÂä°Âô®Êñá‰ª∂
 * ÈÖçÁΩÆÂíåÂêØÂä®ExpressÊúçÂä°Âô®
 */
/*
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

// ÂØºÂÖ•Ë∑ØÁî±Âíå‰∏≠Èó¥‰ª∂
const routes = require('./routes');
const { ErrorHandler } = require('./middleware/errorHandler');
const database = require('./config/database');

class Server {
    constructor() {
        this.app = express();
        this.port = process.env.API_PORT || 3000;
        this.environment = process.env.NODE_ENV || 'development';
        
        this.initializeMiddlewares();
        this.initializeRoutes();
        this.initializeErrorHandling();
        this.initializeDatabase();
    }


    initializeMiddlewares() {
        // ÂÆâÂÖ®‰∏≠Èó¥‰ª∂
        this.app.use(helmet({
            crossOriginResourcePolicy: { policy: "cross-origin" }
        }));

        // CORSÈÖçÁΩÆ
        this.app.use(cors({
            origin: process.env.CLIENT_URL || 'http://localhost:8080',
            methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
            allowedHeaders: ['Content-Type', 'Authorization', 'Accept'],
            credentials: true,
            maxAge: 86400 // 24 hours
        }));

        // ÈÄüÁéáÈôêÂà∂
        const limiter = rateLimit({
            windowMs: 15 * 60 * 1000, // 15 minutes
            max: 100, // limit each IP to 100 requests per windowMs
            message: {
                success: false,
                error: {
                    code: 'RATE_LIMIT_EXCEEDED',
                    message: 'Too many requests from this IP, please try again later.',
                    timestamp: new Date().toISOString()
                }
            },
            standardHeaders: true,
            legacyHeaders: false,
        });

        this.app.use(limiter);

        // Ëß£ÊûêËØ∑Ê±Ç‰Ωì
        this.app.use(express.json({
            limit: '10mb',
            verify: (req, res, buf) => {
                req.rawBody = buf;
            }
        }));

        this.app.use(express.urlencoded({
            extended: true,
            limit: '10mb'
        }));

        // ËØ∑Ê±ÇÊó•Âøó‰∏≠Èó¥‰ª∂
        this.app.use((req, res, next) => {
            console.log(`${new Date().toISOString()} - ${req.method} ${req.url} - ${req.ip}`);
            next();
        });

        // ÂìçÂ∫îÊó∂Èó¥Â§¥
        this.app.use((req, res, next) => {
            const start = Date.now();
            res.on('finish', () => {
                const duration = Date.now() - start;
                res.setHeader('X-Response-Time', `${duration}ms`);
                console.log(`${req.method} ${req.url} - ${res.statusCode} - ${duration}ms`);
            });
            next();
        });
    }


    initializeRoutes() {
        // APIË∑ØÁî±
        this.app.use('/', routes);

        // Ê†πË∑ØÂæÑ
        this.app.get('/', (req, res) => {
            res.json({
                success: true,
                message: 'Charity Events API is running!',
                version: '1.0.0',
                endpoints: {
                    events: '/api/events',
                    categories: '/api/categories',
                    health: '/api/health',
                    info: '/api/info'
                },
                documentation: 'See /api/info for detailed API documentation',
                timestamp: new Date().toISOString()
            });
        });

        // 404Â§ÑÁêÜ
        this.app.use('*', ErrorHandler.handleNotFound);
    }


    initializeErrorHandling() {
        // ÂÖ®Â±ÄÈîôËØØÂ§ÑÁêÜ‰∏≠Èó¥‰ª∂
        this.app.use(ErrorHandler.globalErrorHandler);
    }


    async initializeDatabase() {
        try {
            console.log('üóÑÔ∏è Initializing database connection...');
            
            const isConnected = await database.testConnection();
            if (!isConnected) {
                throw new Error('Failed to connect to database');
            }
            
            const dbStatus = await database.getDatabaseStatus();
            console.log('‚úÖ Database initialized successfully:', dbStatus);
            
        } catch (error) {
            console.error('‚ùå Database initialization failed:', error);
            process.exit(1);
        }
    }


    async start() {
        try {
            this.server = this.app.listen(this.port, () => {
                console.log('\n' + '='.repeat(60));
                console.log('üöÄ Charity Events API Server Started Successfully!');
                console.log('='.repeat(60));
                console.log(`üìç Environment: ${this.environment}`);
                console.log(`üìç Server URL: http://localhost:${this.port}`);
                console.log(`üìç API Base: http://localhost:${this.port}/api`);
                console.log(`üìç Health Check: http://localhost:${this.port}/api/health`);
                console.log(`üìç API Info: http://localhost:${this.port}/api/info`);
                console.log('='.repeat(60));
                console.log('üìã Available Endpoints:');
                console.log('   GET  /api/events              - Get all events');
                console.log('   GET  /api/events/:id          - Get event by ID');
                console.log('   GET  /api/events/search/query - Search events');
                console.log('   GET  /api/categories          - Get all categories');
                console.log('   GET  /api/health              - Health check');
                console.log('='.repeat(60) + '\n');
            });

            // ‰ºòÈõÖÂÖ≥Èó≠Â§ÑÁêÜ
            this.setupGracefulShutdown();

        } catch (error) {
            console.error('‚ùå Failed to start server:', error);
            process.exit(1);
        }
    }


    setupGracefulShutdown() {
        const shutdown = async (signal) => {
            console.log(`\n‚ö†Ô∏è Received ${signal}. Starting graceful shutdown...`);
            
            // ÂÖ≥Èó≠ÊúçÂä°Âô®ÔºåÂÅúÊ≠¢Êé•ÂèóÊñ∞ËØ∑Ê±Ç
            this.server.close(async (err) => {
                if (err) {
                    console.error('‚ùå Error during server shutdown:', err);
                    process.exit(1);
                }
                
                console.log('‚úÖ HTTP server closed');
                
                // ÂÖ≥Èó≠Êï∞ÊçÆÂ∫ìËøûÊé•
                try {
                    await database.closePool();
                    console.log('‚úÖ Database connections closed');
                } catch (dbError) {
                    console.error('‚ùå Error closing database connections:', dbError);
                }
                
                console.log('‚úÖ Graceful shutdown completed');
                process.exit(0);
            });

            // Âº∫Âà∂ÈÄÄÂá∫ËÆ°Êó∂Âô®
            setTimeout(() => {
                console.error('üí• Forced shutdown after timeout');
                process.exit(1);
            }, 10000);
        };

        // Ê≥®ÂÜåÂÖ≥Èó≠‰ø°Âè∑
        process.on('SIGTERM', () => shutdown('SIGTERM'));
        process.on('SIGINT', () => shutdown('SIGINT'));
        process.on('SIGUSR2', () => shutdown('SIGUSR2')); // nodemonÈáçÂêØ
    }


    async stop() {
        if (this.server) {
            this.server.close();
            await database.closePool();
            console.log('‚úÖ Server stopped successfully');
        }
    }
}

// ÂàõÂª∫ÊúçÂä°Âô®ÂÆû‰æã
const server = new Server();

// ÂêØÂä®ÊúçÂä°Âô®
if (require.main === module) {
    server.start().catch(error => {
        console.error('‚ùå Failed to start server:', error);
        process.exit(1);
    });
}

module.exports = server;
*/