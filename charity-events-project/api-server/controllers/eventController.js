/**
 * ‰∫ã‰ª∂ÊéßÂà∂Âô®
 * Â§ÑÁêÜ‰∫ã‰ª∂Áõ∏ÂÖ≥ÁöÑ‰∏öÂä°ÈÄªËæëÂíåÊï∞ÊçÆÂ§ÑÁêÜ
 */

const database = require('../config/database');
const { NotFoundError, ValidationError } = require('../middleware/errorHandler');

class EventController {
    constructor() {
        this.db = database.createPool();
    }

    /**
     * Ëé∑ÂèñÊâÄÊúâÊ¥ªÂä®
     */
    async getAllEvents(req, res, next) {
        try {
            console.log('üì• Fetching all events from database');
            
            const query = `
                SELECT 
                    e.id,
                    e.name,
                    e.short_description,
                    e.full_description,
                    e.date_time,
                    e.location,
                    e.address,
                    e.category_id,
                    e.ticket_price,
                    e.ticket_type,
                    e.goal_amount,
                    e.current_amount,
                    e.is_active,
                    e.max_attendees,
                    e.created_at,
                    e.updated_at,
                    c.name as category_name
                FROM events e
                LEFT JOIN categories c ON e.category_id = c.id
                WHERE e.is_active = TRUE
                ORDER BY e.date_time ASC
            `;
            
            const [events] = await this.db.execute(query);
            
            console.log(`‚úÖ Found ${events.length} active events`);
            
            // Â§ÑÁêÜÊï∞ÊçÆÊ†ºÂºè
            const processedEvents = events.map(event => this._processEventData(event));
            
            res.json({
                success: true,
                data: processedEvents,
                meta: {
                    count: processedEvents.length,
                    timestamp: new Date().toISOString(),
                    filters: {
                        active_only: true
                    }
                }
            });
            
        } catch (error) {
            console.error('‚ùå Error fetching events:', error);
            next(error);
        }
    }

    /**
     * Ê†πÊçÆIDËé∑ÂèñÂçï‰∏™Ê¥ªÂä®
     */
    async getEventById(req, res, next) {
        try {
            const eventId = req.validatedEventId;
            
            console.log(`üì• Fetching event with ID: ${eventId}`);
            
            const query = `
                SELECT 
                    e.id,
                    e.name,
                    e.short_description,
                    e.full_description,
                    e.date_time,
                    e.location,
                    e.address,
                    e.category_id,
                    e.ticket_price,
                    e.ticket_type,
                    e.goal_amount,
                    e.current_amount,
                    e.is_active,
                    e.max_attendees,
                    e.created_at,
                    e.updated_at,
                    c.name as category_name
                FROM events e
                LEFT JOIN categories c ON e.category_id = c.id
                WHERE e.id = ? AND e.is_active = TRUE
            `;
            
            const [events] = await this.db.execute(query, [eventId]);
            
            if (events.length === 0) {
                throw new NotFoundError(`Event with ID ${eventId} not found or is inactive`);
            }
            
            const event = this._processEventData(events[0]);
            console.log(`‚úÖ Found event: ${event.name}`);
            
            res.json({
                success: true,
                data: event,
                meta: {
                    timestamp: new Date().toISOString()
                }
            });
            
        } catch (error) {
            console.error(`‚ùå Error fetching event ${req.validatedEventId}:`, error);
            next(error);
        }
    }

    /**
     * ÊêúÁ¥¢Ê¥ªÂä®
     */
/**
 * ÊêúÁ¥¢Ê¥ªÂä® - Á¥ßÊÄ•‰øÆÂ§çÁâàÊú¨
 */
    async searchEvents(req, res, next) {
        try {
            const { date, location, category } = req.query;
            
            console.log('üîç Search request received with filters:', { 
                date, 
                location, 
                category 
            });
            
            // ÁÆÄÂçïÁöÑSQLÊü•ËØ¢
            let query = `
                SELECT 
                    e.*,
                    c.name as category_name
                FROM events e
                LEFT JOIN categories c ON e.category_id = c.id
                WHERE e.is_active = TRUE
            `;
            
            const params = [];
            
            // Ê∑ªÂä†Á≠õÈÄâÊù°‰ª∂
            if (date) {
                query += ' AND DATE(e.date_time) = ?';
                params.push(date);
            }
            
            if (location) {
                query += ' AND (e.location LIKE ? OR e.name LIKE ?)';
                params.push(`%${location}%`);
                params.push(`%${location}%`);
            }
            
            if (category) {
                query += ' AND e.category_id = ?';
                params.push(category);
            }
            
            query += ' ORDER BY e.date_time ASC';
            
            console.log('üìù Executing query:', query);
            console.log('üìù With parameters:', params);
            
            // ÊâßË°åÊü•ËØ¢
            const [events] = await this.db.execute(query, params);
            
            console.log(`‚úÖ Search completed: found ${events.length} events`);
            
            // ËøîÂõûÁÆÄÂåñÂìçÂ∫î
            res.json({
                success: true,
                data: events,
                count: events.length,
                message: `Found ${events.length} events`
            });
            
        } catch (error) {
            console.error('‚ùå Search error:', error);
            res.status(500).json({
                success: false,
                error: 'Search failed',
                message: error.message
            });
        }
    }

    /**
     * Ëé∑ÂèñÂç≥Â∞ÜÂà∞Êù•ÁöÑÊ¥ªÂä®
     */
    async getUpcomingEvents(req, res, next) {
        try {
            const limit = parseInt(req.query.limit) || 6;
            
            console.log(`üìÖ Fetching ${limit} upcoming events`);
            
            const query = `
                SELECT 
                    e.id,
                    e.name,
                    e.short_description,
                    e.full_description,
                    e.date_time,
                    e.location,
                    e.address,
                    e.category_id,
                    e.ticket_price,
                    e.ticket_type,
                    e.goal_amount,
                    e.current_amount,
                    e.is_active,
                    e.max_attendees,
                    e.created_at,
                    e.updated_at,
                    c.name as category_name
                FROM events e
                LEFT JOIN categories c ON e.category_id = c.id
                WHERE e.is_active = TRUE 
                AND e.date_time >= CURDATE()
                ORDER BY e.date_time ASC
                LIMIT ?
            `;
            
            const [events] = await this.db.execute(query, [limit]);
            
            console.log(`‚úÖ Found ${events.length} upcoming events`);
            
            const processedEvents = events.map(event => this._processEventData(event));
            
            res.json({
                success: true,
                data: processedEvents,
                meta: {
                    count: processedEvents.length,
                    limit: limit,
                    timestamp: new Date().toISOString()
                }
            });
            
        } catch (error) {
            console.error('‚ùå Error fetching upcoming events:', error);
            next(error);
        }
    }

    /**
     * Ëé∑ÂèñÁÉ≠Èó®Ê¥ªÂä®ÔºàÊåâÁ≠πÊ¨æËøõÂ∫¶Ôºâ
     */
    async getFeaturedEvents(req, res, next) {
        try {
            const limit = parseInt(req.query.limit) || 4;
            
            console.log(`‚≠ê Fetching ${limit} featured events`);
            
            const query = `
                SELECT 
                    e.id,
                    e.name,
                    e.short_description,
                    e.full_description,
                    e.date_time,
                    e.location,
                    e.address,
                    e.category_id,
                    e.ticket_price,
                    e.ticket_type,
                    e.goal_amount,
                    e.current_amount,
                    e.is_active,
                    e.max_attendees,
                    e.created_at,
                    e.updated_at,
                    c.name as category_name,
                    (e.current_amount / e.goal_amount) as progress_ratio
                FROM events e
                LEFT JOIN categories c ON e.category_id = c.id
                WHERE e.is_active = TRUE 
                AND e.goal_amount > 0
                AND e.date_time >= CURDATE()
                ORDER BY progress_ratio DESC, e.date_time ASC
                LIMIT ?
            `;
            
            const [events] = await this.db.execute(query, [limit]);
            
            console.log(`‚úÖ Found ${events.length} featured events`);
            
            const processedEvents = events.map(event => this._processEventData(event));
            
            res.json({
                success: true,
                data: processedEvents,
                meta: {
                    count: processedEvents.length,
                    limit: limit,
                    timestamp: new Date().toISOString()
                }
            });
            
        } catch (error) {
            console.error('‚ùå Error fetching featured events:', error);
            next(error);
        }
    }

    /**
     * Ëé∑ÂèñÊ¥ªÂä®ÁªüËÆ°‰ø°ÊÅØ
     */
    async getEventStats(req, res, next) {
        try {
            console.log('üìä Fetching event statistics');
            
            const query = `
                SELECT 
                    COUNT(*) as total_events,
                    COUNT(CASE WHEN is_active = TRUE THEN 1 END) as active_events,
                    COUNT(CASE WHEN date_time >= CURDATE() THEN 1 END) as upcoming_events,
                    COUNT(CASE WHEN date_time < CURDATE() THEN 1 END) as past_events,
                    COALESCE(SUM(goal_amount), 0) as total_goal_amount,
                    COALESCE(SUM(current_amount), 0) as total_current_amount,
                    COALESCE(AVG(ticket_price), 0) as avg_ticket_price,
                    MAX(date_time) as latest_event_date,
                    MIN(date_time) as earliest_event_date
                FROM events
                WHERE is_active = TRUE
            `;
            
            const [stats] = await this.db.execute(query);
            const statistics = stats[0];
            
            // ËÆ°ÁÆóÊÄª‰ΩìËøõÂ∫¶
            const overallProgress = statistics.total_goal_amount > 0 
                ? (statistics.total_current_amount / statistics.total_goal_amount) * 100 
                : 0;
            
            const enhancedStats = {
                ...statistics,
                overall_progress: Math.round(overallProgress * 100) / 100
            };
            
            console.log('‚úÖ Event statistics calculated');
            
            res.json({
                success: true,
                data: enhancedStats,
                meta: {
                    timestamp: new Date().toISOString()
                }
            });
            
        } catch (error) {
            console.error('‚ùå Error fetching event statistics:', error);
            next(error);
        }
    }

    /**
     * Â§ÑÁêÜ‰∫ã‰ª∂Êï∞ÊçÆÊ†ºÂºè
     */
    _processEventData(event) {
        return {
            id: event.id,
            name: event.name,
            short_description: event.short_description,
            full_description: event.full_description,
            date_time: event.date_time,
            location: event.location,
            address: event.address,
            category_id: event.category_id,
            category_name: event.category_name,
            ticket_price: parseFloat(event.ticket_price),
            ticket_type: event.ticket_type,
            goal_amount: parseFloat(event.goal_amount),
            current_amount: parseFloat(event.current_amount),
            is_active: Boolean(event.is_active),
            max_attendees: event.max_attendees,
            created_at: event.created_at,
            updated_at: event.updated_at,
            // ËÆ°ÁÆóÂ≠óÊÆµ
            progress_percentage: event.goal_amount > 0 
                ? Math.round((event.current_amount / event.goal_amount) * 100 * 100) / 100 
                : 0,
            days_until: this._calculateDaysUntil(event.date_time),
            is_upcoming: new Date(event.date_time) >= new Date(),
            is_free: parseFloat(event.ticket_price) === 0
        };
    }

    /**
     * ËÆ°ÁÆóË∑ùÁ¶ªÊ¥ªÂä®ËøòÊúâÂ§öÂ∞ëÂ§©
     */
    _calculateDaysUntil(eventDate) {
        const now = new Date();
        const event = new Date(eventDate);
        const diffTime = event - now;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays > 0 ? diffDays : 0;
    }

    /**
     * È™åËØÅ‰∫ã‰ª∂ÊòØÂê¶Â≠òÂú®
     */
    async validateEventExists(eventId) {
        try {
            const query = 'SELECT id FROM events WHERE id = ? AND is_active = TRUE';
            const [events] = await this.db.execute(query, [eventId]);
            return events.length > 0;
        } catch (error) {
            console.error('‚ùå Error validating event existence:', error);
            throw error;
        }
    }
}

module.exports = new EventController();